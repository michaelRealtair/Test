@model Realtair.Framework.Core.Web.Controllers.ActionsController.ActionViewModel
@using Realtair.Framework.Core.Entities;
@using Realtair.Framework.Core.Interfaces;
@using Realtair.Framework.Core.Actions;
@using Realtair.Framework.Core.Web.Utilities;
@using System;

@{
	var detailsTemplate = "-";

	if (Model.Action.This != null)
	{
		detailsTemplate = $"{Model.Action.This.ActualType().Name}/{Model.Action.GetType().Name}";
	}

	if (Html.ViewExists(detailsTemplate))
	{
		Layout = null;
		Html.RenderPartial(detailsTemplate, Model.Action);
	}
	else
	{
		IEnumerable<Field> shown;
		IEnumerable<Field> shownWithFieldSets;
		IEnumerable<Field> hidden;

		TempData["ShowSubmit"] = true;

		if (Model.IsMultiPage)
		{
			shown = Model.FieldsForPage;
			shownWithFieldSets = Model.FieldsForPage.Where(f => f.FieldSetAttribute != null).ToList();
			hidden = Model.HiddenFieldsForPage;
		}
		else
		{
			shown = Model.Fields;
			shownWithFieldSets = Model.Fields.Where(f => f.FieldSetAttribute != null).ToList();
			hidden = null;
		}


		@Html.Partial("Menu")

		<div id="page-wrapper" class="with-background">
			<div class="container">
				<div class="panel panel-default">
                    @* Header *@
					<div class="panel-heading">
						@if (Model.IsMultiPage)
						{
							@Model.Page.Name.ToUpper()
						}
						else
						{
							@Model.Action.Description(Html.LoggedInUser()).ToUpper()
						}
					</div>
                    @* Validation Errors *@
					@if (Model.Action.HasValidated && !Model.Action.IsValid)
					{
						<div class="col-md-12" style="padding: 0;">
							@foreach (var error in Model.Action.Errors.Where(e => e.MemberNames.Count() == 0))
							{
                                <div class="alert alert-danger">@error.ErrorMessage</div>
                            }
						</div>
					}
                    @* Form *@
					<form class="autoform form-horizontal" id="main-form" method="post">
						<div class="panel-body">
							@foreach (var field in shown)
							{
								if (field.FieldSetAttribute != null)
								{
									var fieldSetItems = shownWithFieldSets.Where(s => s.FieldSetAttribute.Legend == field.FieldSetAttribute.Legend).ToList();
									if (fieldSetItems.Any())
									{
										<fieldset>
											<legend>@field.FieldSetAttribute.Legend</legend>
											<div class="p-l-30">
												@foreach (var item in fieldSetItems)
												{
													var fieldWithReturnType = $"Fields/_{item.PropertyType.Name}_{item.FieldAttribute.GetType().Name.Substring(0, item.FieldAttribute.GetType().Name.Length - "Attribute".Length)}";
													var fieldWithoutReturnType = $"Fields/_{item.FieldAttribute.GetType().Name.Substring(0, item.FieldAttribute.GetType().Name.Length - "Attribute".Length)}";

													if (Html.ViewExists(fieldWithReturnType))
													{
														Html.RenderPartial(fieldWithReturnType, item);
													}
													else if (Html.ViewExists(fieldWithoutReturnType))
													{
														Html.RenderPartial(fieldWithoutReturnType, item);
													}
													else
													{
														<p> Cannot render field view, looked for both @fieldWithReturnType and @fieldWithoutReturnType </p>
													}
												}
											</div>
										</fieldset>

										shownWithFieldSets = shownWithFieldSets.Except(fieldSetItems).ToList();
									}
								}
								else
								{
									var fieldWithReturnType = $"Fields/_{field.PropertyType.Name}_{field.FieldAttribute.GetType().Name.Substring(0, field.FieldAttribute.GetType().Name.Length - "Attribute".Length)}";
									var fieldWithoutReturnType = $"Fields/_{field.FieldAttribute.GetType().Name.Substring(0, field.FieldAttribute.GetType().Name.Length - "Attribute".Length)}";

									if (Html.ViewExists(fieldWithReturnType))
									{
										Html.RenderPartial(fieldWithReturnType, field);
									}
									else if (Html.ViewExists(fieldWithoutReturnType))
									{
										Html.RenderPartial(fieldWithoutReturnType, field);
									}
									else
									{
										<p>Cannot render field view, looked for both @fieldWithReturnType and @fieldWithoutReturnType</p>
									}
								}
							}

							@if (hidden != null)
							{
								foreach (var field in hidden)
								{
									if (field.FieldAttribute is Realtair.Framework.Core.Actions.FieldAttributes.BulkFileUploadFieldAttribute && field.Value is IEnumerable<Attachment>)
									{
										<input type="hidden" name="@field.UniqueName" value="[@foreach (var a in field.Value as IEnumerable<Attachment>) { @(a.Id + ",") }]" />
									}
									else if (field.Value is IList<Attachment>)
									{
										<input type="hidden" name="@field.UniqueName" value="[@(string.Join(",",((IList<Attachment>)field.Value).Select(f => f.Id.ToString())))]" />
									}
									else if (field.Value is ICustomViewModel)
									{
										<input type="hidden" name="@field.UniqueName" value="@((field.Value as ICustomViewModel).Serialize())" />
									}
									else if (field.Value is IEnumerable<ICustomViewModel>)
									{
										if ((field.Value as IEnumerable<ICustomViewModel>).Count() > 0)
										{
											<input type="hidden" name="@field.UniqueName" value="[@(string.Join(",", (field.Value as IEnumerable<ICustomViewModel>).Select(s => s.Serialize())))]" />
										}
									}
									else if (field.Value is IEnumerable<Entity>)
									{
										<input type="hidden" name="@field.UniqueName" value="[@(string.Join(",", (field.Value as IEnumerable<Entity>).Select(e => e.Id.ToString())))]" />
									}
									else if (field.Value is Entity)
									{
										<input type="hidden" name="@field.UniqueName" value="@((field.Value as Entity).Id)" />
									}
									else if (field.FieldAttribute is Realtair.Framework.Core.Actions.FieldAttributes.WidgetFieldAttribute)
									{

									}
									else if (field.Value is bool?[])
									{
										var values = "";
										foreach (var v in (field.Value as IEnumerable<bool?>).ToList())
										{
											if (v != null) { values += v + ","; }
											else { values += "null,"; }

										}
										<input type="hidden" name="@field.UniqueName" value="[@(values.Substring(0, values.Length - 1).ToLower())]" />
									}
									else if (field.Value is DateTime)
									{
										var date = (DateTime)field.Value;
										<input type="hidden" name="@field.UniqueName" value="@if(date > DateTime.MinValue) { @date.ToString("yyyy-MM-dd") }" />
									}
									else if (field.Value is bool)
									{
										<input type="hidden" name="@field.UniqueName" value="@field.Value.ToString()" />
									}
									else
									{
										<input type="hidden" name="@field.UniqueName" value="@field.Value" />
									}
								}

								<input type="hidden" name="submittedpagenames" value="@string.Join(",", Model.SubmittedPages.Select(p => p.GetType().Name))" />
								<input type="hidden" name="page" value="@Model.Page.GetType().Name" />
							}

							<input type="submit" style="position: absolute; left: -9999px; width: 1px; height: 1px;" tabindex="-1" />
						</div>
					</form>

					@if ((bool)TempData["ShowSubmit"] || Model.SubmittedPages.Count != 0)
				{
						<div class="panel-footer">
							@if ((bool)TempData["ShowSubmit"])
							{
								<button data-next class="btn btn-primary pull-right m-l-20" id="main-form-submit">Submit</button>
							}

							@if (Model.SubmittedPages.Count != 0)
							{
								<button class="btn btn-default pull-right" onclick='$("#back-form").submit();'>Back</button>
							}
							else
							{
								<button class="btn btn-default pull-right" onclick='$("#cancel-form").submit();'>Cancel</button>
							}

							<div class="clearfix"></div>
						</div>
					}

					@if (Model.IsMultiPage)
				{
					if (Model.SubmittedPages.Count != 0)
					{
							<form method="post" id="back-form">
								@if (hidden != null)
								{
									foreach (var field in hidden)
									{
										if (field.FieldAttribute is Realtair.Framework.Core.Actions.FieldAttributes.BulkFileUploadFieldAttribute && field.Value is IEnumerable<Attachment>)
										{
											<input type="hidden" name="@field.UniqueName" value="[@foreach (var a in field.Value as IEnumerable<Attachment>) { @(a.Id + ",") }]" />
										}
										else if (field.Value is IEnumerable<Attachment>)
										{
											foreach (var file in (IEnumerable<Attachment>)field.Value)
											{
												<input type="hidden" name="@field.UniqueName" value="@(file.Id)" />
											}
										}
										else if (field.Value is ICustomViewModel)
										{
											<input type="hidden" name="@field.UniqueName" value="@((field.Value as ICustomViewModel).Serialize())" />
										}
										else if (field.Value is IEnumerable<ICustomViewModel>)
										{
											if ((field.Value as IEnumerable<ICustomViewModel>).Count() > 0)
											{
												<input type="hidden" name="@field.UniqueName" value="[@(string.Join(",", (field.Value as IEnumerable<ICustomViewModel>).Select(s => s.Serialize())))]" />
											}
										}
										else if (field.Value is Entity)
										{
											<input type="hidden" name="@field.UniqueName" value="@((field.Value as Entity).Id)" />
										}
										else if (field.Value is IEnumerable<Entity>)
										{
											<input type="hidden" name="@field.UniqueName" value="[@(string.Join(",", (field.Value as IEnumerable<Entity>).Select(e => e.Id.ToString())))]" />
										}
										else if (field.FieldAttribute is Realtair.Framework.Core.Actions.FieldAttributes.WidgetFieldAttribute)
										{

										}
										else if (field.Value is bool?[])
										{
											var values = "";
											foreach (var v in (field.Value as IEnumerable<bool?>).ToList())
											{
												if (v != null) { values += v + ","; }
												else { values += "null,"; }

											}
											<input type="hidden" name="@field.UniqueName" value="[@(values.Substring(0, values.Length - 1).ToLower())]" />
										}
										else if (field.Value is DateTime)
										{
											var date = (DateTime)field.Value;
											<input type="hidden" name="@field.UniqueName" value="@if(date > DateTime.MinValue) { @date.ToString("yyyy-MM-dd") }" />
										}
										else if (field.Value is bool)
										{
											<input type="hidden" name="@field.UniqueName" value="@field.Value.ToString()" />
										}
										else
										{
											<input type="hidden" name="@field.UniqueName" value="@field.Value" />
										}
									}
									<input type="hidden" name="submittedpagenames" value="@string.Join(",", Model.SubmittedPages.Select(p => p.GetType().Name))" />
									<input type="hidden" name="page" value="@Model.Page.GetType().Name" />
									<input type="hidden" name="back" value="true" />
								}
							</form>
						}
					}
					 <form method="post" id="cancel-form">
						<input type="hidden" name="cancel" value="true" />                         
					 </form>
				</div>

			</div>
		</div>
		<script>
			$('#main-form-submit').click(function (e) {
				e.preventDefault()
				var bValid = true;
				$(document).find('input.required:visible').each(function () {
					var formgroup = $(this).closest('.form-group');
					if ($(this).val() === '') {
						formgroup.addClass('has-error');
						var label = formgroup.find('label.control-label').text();

						console.log(formgroup.find('div').index(0));
						if ($(this).closest('.col-md-9').find('span.help-block').length == 0)
							$(this).closest('.col-md-9').append('<span class="help-block">The ' + label + ' field is required.</span>');

						bValid = false;
					} else {
						formgroup.removeClass('has-error');
						formgroup.find('span.help-block').remove();
					}
				});

				if (bValid) {
					$('.preloader').css('display', 'block');
					$('#main-form').submit.disabled = true;
					$('#main-form').submit();
				}
			});
		</script>
	}
}

@section Scripts {
	@Html.RenderDelayed()
}
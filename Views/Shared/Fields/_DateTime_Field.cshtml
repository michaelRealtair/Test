@model Realtair.Framework.Core.Actions.Field

@{
    var attribute = Model.FieldAttribute as Realtair.Framework.Core.Actions.FieldAttributes.DateTimeFieldAttribute;
    var Date = Convert.ToDateTime(Model.Value);
    var dateFormat = "yyyy-MM-dd";
}

<div class="form-group">
    <div class="col-md-3 col-sm-4">
        <label class="control-label">@Model.Label</label>
    </div>

    <div class="col-md-9 col-sm-8">
        <div class="input-group">
            <input id="@Model.UniqueName"
                   name="@Model.UniqueName"
                   type="text"
                   class="form-control mydatepicker input-small"
                   value="@if (Date > DateTime.MinValue) { @Date.ToString(dateFormat) }"
                   placeholder="@dateFormat">
            <label class="input-group-addon btn" for="@Model.UniqueName">
                <span class="mdi mdi-calendar-blank"></span>
            </label>
            @if (Model.HasError)
            {
                <span class="help-block">@Model.ErrorMessage</span>
            }
        </div>
    </div>
</div>

@using (Html.Delayed(null, "date-time-field"))
{
    <link rel="stylesheet" href="https://static.realtair.com/plugins/bower_components/bootstrap-datepicker/bootstrap-datepicker.min.css" type="text/css" />
    <script src="https://static.realtair.com/plugins/bower_components/bootstrap-datepicker/bootstrap-datepicker.min.js"></script>
    <script>
        $(function () {
            $('.mydatepicker').datepicker({
                format: 'yyyy-mm-dd',
                startDate: new Date(2000, 0, 1),
                @Html.Raw(attribute != null && !attribute.AllowPastDates ? "startDate: '+0d'," : "")
                autoclose: true,
                clearBtn: true
            });
        })
    </script>
}